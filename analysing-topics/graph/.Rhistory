geom_point(aes(x = data[1:len, 2], y = rep(1.1, len))) +
geom_point(aes(x = data[1:len, 3], y = rep(1.2, len))) +
scale_shape_manual(values = 12)
ggplot() +
scale_shape_manual(values = 12) +
geom_point(aes(x = data[1:len, 1], y = rep(1, len))) +
geom_point(aes(x = data[1:len, 2], y = rep(1.1, len))) +
geom_point(aes(x = data[1:len, 3], y = rep(1.2, len)))
plot(x=data[1:len,1], y = constant)
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
plot(x=data[1:len,1], y = constant, ylim = (1, 3))
plot(x=data[1:len,1], y = constant, ylim = 3)
source('~/onedrive/ynus/work/research/autoware/graph/graph.R', echo=TRUE)
ggplot() +
scale_shape_manual(values = 12) +
geom_point(aes(x = data[1:len, 1], y = rep(1, len))) +
geom_point(aes(x = data[1:len, 2], y = rep(1.1, len))) +
geom_point(aes(x = data[1:len, 3], y = rep(1.2, len)))
plot(x=data[1:len,1], y = constant, ylim = 3)
points(x = data[1:len, 2], y = rep(1.1, len))
plot(x=data[1:len,1], y = constant)
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
# import library  ---------------------------------------------------------------
library("dplyr")
library("ggplot2")
# setting up data --------------------------------------------------------------
data <- t(read.csv("timestamp.csv"))
# import library  ---------------------------------------------------------------
library("dplyr")
library("ggplot2")
# setting up data --------------------------------------------------------------
data <- t(read.csv("timestamp.csv"), header = FALSE)
# setting up data --------------------------------------------------------------
data <- (read.csv("timestamp.csv"), header = FALSE)
# setting up data --------------------------------------------------------------
data <-  (read.csv("timestamp.csv", header = FALSE))
View(data)
# setting up data --------------------------------------------------------------
data <- t(read.csv("timestamp.csv", header = FALSE))
View(data)
len <- 100 # number of calls to look at
constant <- rep(1, len)
length(constant)
length(data[1:len,])
plot(x=data[1:len,1], y = constant)
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = (1.4e9, 1.6e9))
plot(x=data[1:len,1], y = constant, xlim = c(1.4e9, 1.6e9))
plot(x=data[1:len,1], y = constant, xlim = c(1.4e9, 1.5e9))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157794))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157860,
1427157794))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157860,
1427157794))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157850,
1427157794))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157794))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157794,
1427157874
1427))
plot(x=data[1:len,1], y = constant, xlim = c(1427157794,
1427157874))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157874))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157870))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867,0.1))
plot(x=data[1:len,1], y = constant, xlim = seq(1427157864,
1427157867, 1))
c
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867))
points(x = data[1:len, 2], y = rep(1.1, len))
points(x = data[1:len, 3], y = rep(1.2, len))
points(x = data[1:len, 4], y = rep(1.3, len))
points(x = data[1:len, 5], y = rep(1.4, len))
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867)) # /base_waypoints
points(x = data[1:len, 2], y = rep(1.1, len)) # /cluster_centroids
points(x = data[1:len, 2], y = rep(1.1, len)) # /cluster_centroids
points(x = data[1:len, 3], y = rep(1.2, len)) # /current_pose
points(x = data[1:len, 4], y = rep(1.3, len)) # /current_velocity
points(x = data[1:len, 5], y = rep(1.4, len)) # /detection/lidar_detector/cloud_clusters
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867)) # /base_waypoints
points(x = data[1:len, 2], y = rep(1.1, len), pch = 2) # /cluster_centroids
points(x = data[1:len, 3], y = rep(1.2, len), pch = 2) # /current_pose
points(x = data[1:len, 4], y = rep(1.3, len), pch = 2) # /current_velocity
points(x = data[1:len, 5], y = rep(1.4, len), pch = 2) # /detection/lidar_detector/cloud_clusters
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867)) # /base_waypoints
points(x = data[1:len, 2], y = rep(1.1, len), pch = 6) # /cluster_centroids
points(x = data[1:len, 3], y = rep(1.2, len), pch = 6) # /current_pose
points(x = data[1:len, 4], y = rep(1.3, len), pch = 6) # /current_velocity
points(x = data[1:len, 5], y = rep(1.4, len), pch = 6) # /detection/lidar_detector/cloud_clusters
length(data[1:len,])
length(constant)
constant <- rep(1, len)
length(constant)
length(data[1:len,])
index <- seq(1, 10, 10)
index <- seq(1, 10, 2)
index <- seq(0, 10, (10-0)/ncol(data))
index[1]
index <- seq(0, 10, (10-1)/ncol(data))
ncol(data)
index <- seq(0, 10, (10-0)/(ncol(data) + 1))
index <- seq(0, 10, (10-0)/(ncol(data) - 1))
index <- seq(0, 10, 10/(ncol(data) - 1))
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867)) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
points(x = data[1:len, 2], y = rep(index[2], len), pch = 6) # /cluster_centroids
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867)) # /base_waypoints
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867), ylim = c(0, 10)) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
index <- seq(0, ncol(data), 1)
index <- seq(1, ncol(data), 1)
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867), ylim = c(0, 10)) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867), ylim = c(0, ncol(data))) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], y = constant, xlim = c(1427157864,
1427157867), ylim = c(1, ncol(data))) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], xlim = c(1427157864, 1427157867),
y = rep(index[1], len), ylim = c(1, ncol(data))) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
length(data[1:len,])
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data))) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# using ggplot without loimit in x-axis
for (i in 2:ncol(data)) {
print(i)
}
# set up index, x minimum and maximum
index <- seq(1, ncol(data), 1)
xlim <- c(1427157864, 1427157867)
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data))) # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index") # /base_waypoints
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# using ggplot without loimit in x-axis
for (i in 2:ncol(data)) {
print(i)
}
# Drawing graph individually with limit in x-axis
jpeg("timestamp-graph.jpg")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
jpeg('timestamp-graph.jpg')
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
getwd()
source('~/onedrive/ynus/work/research/autoware/graph/graph-2.R', echo=TRUE)
# Drawing graph individually with limit in x-axis
jpeg('timestamp-graph.jpg')
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
dev.off()
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
# Drawing graph individually with limit in x-axis
help(png)
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
dev.off()
grid()
grid(nx = 100)
grid(nx = 10)
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(nx = 10)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(nx = 10)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
# setting up data --------------------------------------------------------------
data <- t(read.csv("timestamp.csv", header = FALSE))
View(data)
len <- 100 # number of calls to look at
# set up index, x minimum and maximum
index <- seq(1, ncol(data), 1)
xlim <- c(1427157864, 1427157867)
# Drawing graph individually with limit in x-axis
help(png)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(nx = 10)
dev.off()
grid(NULL, NULL, lty = 6)
# Drawing graph individually with limit in x-axis
help(png)
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(NULL, NULL, lty = 6)
dev.off()
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(NULL, NULL, lty = 2)
grid(10, NULL, lty = 2)
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(10, NULL, lty = 2)
dev.off()
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
data <- t(read.csv("timestamp.csv", header = FALSE))
View(data)
data <- t(read.csv("timestamp.csv")
data <- t(read.csv("timestamp.csv"))
help("read.csv")
View(data)
data[1,]
data[1:,]
data[1:0,]
data[1:*,]
data[1:,:]
data[1,1]
data[-1, ]
data[] <- lapply(data, function(x) type.convert(as.character(x)))
View(data)
data <- data[-1, ]
data <- t(read.csv("timestamp.csv", header = FALSE, ))
names(data) <- as.matrix(data[1, ])
data <- data[-1, ]
View(data)
data <- t(read.csv("timestamp.csv", header = FALSE, ))
names(data) <- as.matrix(data[1, ])
data_name <- data[1,0]
data <- data[-1, ]
colnames(data) <- data_name
View(data)
data <- t(read.csv("timestamp.csv", header = FALSE, ))
data_name <- data[1,0]
data_name <- data[1,]
data <- t(read.csv("timestamp.csv", header = FALSE, ))
data_name <- data[1,]
data <- data[-1, ]
colnames(data) <- data_name
colnames(data) <- as.character(data_name)
View(data)
data <- t(read.csv("timestamp.csv", header = FALSE, row.names = 1))
View(data)
data <- t(read.csv("timestamp.csv", header = FALSE, row.names = 1))
data <- read.csv("timestamp.csv", header = FALSE, row.names = 1)
("timestamp.csv", header = FALSE, row.names = 1)
data <- t(read.csv("timestamp.csv", header = FALSE, row.names = 1))
# set up index, x minimum and maximum
index <- seq(1, ncol(data), 1)
xlim <- c(1427157864, 1427157867)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
len <- 100 # number of calls to look at
# set up index, x minimum and maximum
index <- seq(1, ncol(data), 1)
xlim <- c(1427157864, 1427157867)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
colnames(data)
help("seq.int")
length(colnames(data))
topics <- colnames(data)
indexed_topics <- data.frame(index = seq.int(1, length(topics)),
topics = topics)
View(indexed_topics)
write.csv(indexed_topics, "index_topics.csv")
write.csv(indexed_topics, "index_topics.csv", row.names = FALSE)
source('~/onedrive/ynus/work/research/autoware/ROSModelling/analysing-topics/graph/make-graph.R', echo=TRUE)
source('~/onedrive/ynus/work/research/autoware/ROSModelling/analysing-topics/graph/make-graph.R', echo=TRUE)
source('~/onedrive/ynus/work/research/autoware/ROSModelling/analysing-topics/graph/make-graph.R', echo=TRUE)
source('~/onedrive/ynus/work/research/autoware/ROSModelling/analysing-topics/graph/make-graph.R', echo=TRUE)
grid(NULL, NULL)
# Generate graph individually with limit in x-axis and save it as png ----------
png('timestamp-graph.png', width = 2000, height = 1200, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(NULL, NULL)
dev.off()
# Generate graph individually with limit in x-axis and save it as png ----------
help("png")
# data <- t(read.csv(args[1], header = FALSE, row.names = 1))
data <- t(read.csv("timestamp.csv", header = FALSE, row.names = 1))
# Preparing data and graph -----------------------------------------------------
# Set the number of calls to look at - UPDATE AS NEEDED!
len <- 100
# set up index
index <- seq(1, ncol(data), 1)
#x minimum and maximum - THIS NEEDS TO BE UPDATED!
xlim <- c(1427157864, 1427157867)
#x minimum and maximum - THIS NEEDS TO BE UPDATED!
xlim <- c(1427157864, 1427157867)
png('timestamp-graph.png', width = 1000, height = 600,
units="px", quality = 100)
png('timestamp-graph.png', width = 1000, height = 600,
units="px")
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
# Preparing data and graph -----------------------------------------------------
# Set the number of calls to look at - UPDATE AS NEEDED!
len <- 30
# set up index
index <- seq(1, ncol(data), 1)
#x minimum and maximum - THIS NEEDS TO BE UPDATED!
xlim <- c(1427157864, 1427157867)
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
# Generate graph individually with limit in x-axis and save it as png ----------
png('timestamp-graph.png', width = 1000, height = 600, units="px")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
# data <- t(read.csv(args[1], header = FALSE, row.names = 1))
data <- t(read.csv("timestamp.csv", header = FALSE, row.names = 1))
# Preparing data and graph -----------------------------------------------------
# Set the number of calls to look at - UPDATE AS NEEDED!
len <- 30
# set up index
index <- seq(1, ncol(data), 1)
#x minimum and maximum - THIS NEEDS TO BE UPDATED!
xlim <- c(1427157864, 1427157867)
plot(x=data[1:len,1], xlim = xlim,
y = rep(index[1], len), ylim = c(1, ncol(data)),
xlab = "timestamp (s)", ylab = "index")
for (i in 2:length(index)) {
points(x = data[1:len, i], y = rep(index[i], len), pch = 6)
}
grid(NULL, NULL)
dev.off()
# create an index of the topic for reference and save it as csv ----------------
topics <- colnames(data)
indexed_topics <- data.frame(index = seq.int(1, length(topics)),
topics = topics)
write.csv(indexed_topics, "index-topics.csv", row.names = FALSE)
# data <- t(read.csv(args[1], header = FALSE, row.names = 1))
data <- read.csv("timestamp.csv", header = FALSE, row.names = 1)
# data <- t(read.csv(args[1], header = FALSE, row.names = 1))
data <- read.csv("timestamp.csv", header = FALSE, row.names = 1)
View(data)
